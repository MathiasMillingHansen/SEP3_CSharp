// <auto-generated />
using System;
using EFC_DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace EFC_DataAccess.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20231129102620_NewDomain")]
    partial class NewDomain
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("Books")
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("AuthorBook", b =>
                {
                    b.Property<int>("AuthorsId")
                        .HasColumnType("integer");

                    b.Property<string>("booksIsbn")
                        .HasColumnType("text");

                    b.HasKey("AuthorsId", "booksIsbn");

                    b.HasIndex("booksIsbn");

                    b.ToTable("AuthorBook", "Books");
                });

            modelBuilder.Entity("BookCourse", b =>
                {
                    b.Property<string>("BooksIsbn")
                        .HasColumnType("text");

                    b.Property<string>("coursesCourseName")
                        .HasColumnType("text");

                    b.HasKey("BooksIsbn", "coursesCourseName");

                    b.HasIndex("coursesCourseName");

                    b.ToTable("BookCourse", "Books");
                });

            modelBuilder.Entity("Shared.Domain.Author", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("authors", "Books");
                });

            modelBuilder.Entity("Shared.Domain.Book", b =>
                {
                    b.Property<string>("Isbn")
                        .HasColumnType("text");

                    b.Property<string>("BookTitle")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Edition")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Isbn");

                    b.ToTable("books", "Books");
                });

            modelBuilder.Entity("Shared.Domain.BookForSale", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("BookIsbn")
                        .HasColumnType("text");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Owner")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal?>("Price")
                        .HasColumnType("numeric");

                    b.Property<string>("condition")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("BookIsbn");

                    b.HasIndex("condition");

                    b.ToTable("booksForSale", "Books");
                });

            modelBuilder.Entity("Shared.Domain.Condition", b =>
                {
                    b.Property<string>("condition")
                        .HasColumnType("text");

                    b.HasKey("condition");

                    b.ToTable("conditions", "Books");
                });

            modelBuilder.Entity("Shared.Domain.Course", b =>
                {
                    b.Property<string>("CourseName")
                        .HasColumnType("text");

                    b.HasKey("CourseName");

                    b.ToTable("courses", "Books");
                });

            modelBuilder.Entity("AuthorBook", b =>
                {
                    b.HasOne("Shared.Domain.Author", null)
                        .WithMany()
                        .HasForeignKey("AuthorsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Shared.Domain.Book", null)
                        .WithMany()
                        .HasForeignKey("booksIsbn")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BookCourse", b =>
                {
                    b.HasOne("Shared.Domain.Book", null)
                        .WithMany()
                        .HasForeignKey("BooksIsbn")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Shared.Domain.Course", null)
                        .WithMany()
                        .HasForeignKey("coursesCourseName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Shared.Domain.BookForSale", b =>
                {
                    b.HasOne("Shared.Domain.Book", "Book")
                        .WithMany()
                        .HasForeignKey("BookIsbn");

                    b.HasOne("Shared.Domain.Condition", "Condition")
                        .WithMany()
                        .HasForeignKey("condition")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("Condition");
                });
#pragma warning restore 612, 618
        }
    }
}
