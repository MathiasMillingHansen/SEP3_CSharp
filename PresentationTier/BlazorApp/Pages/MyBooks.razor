@page "/MyBooks"
@using global::Shared.Domain
@using global::Shared.DTOs
@using HttpClients.ClientInterfaces
@inject IBookService bookService
@inject DialogService DialogService
@inject CurrentlySelectedBookForSale CurrentlySelectedBookForSale

<h3>My Books</h3>
<div class="rz-p-0 rz-p-md-12">
    <p>
        Here is all the books you currently have listed for sale
    </p>

    @foreach (BookForSale bookForSale in _booksForSaleDto.BooksForSale)
    {
        <RadzenCard Variant="@Variant.Filled" class="rz-my-12 rz-mx-auto">
            <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.Start" Gap="1rem" Class="rz-p-12">
                <RadzenRow RowGap="1">
                    <!-- Left side columns -->
                    <RadzenColumn SizeSM="8">

                        <!-- Text in the card -->
                        <RadzenText TextStyle="TextStyle.H4" class="rz-display-flex rz-mt-2 rz-my-0">Book Title</RadzenText>
                        <RadzenText TextStyle="TextStyle.DisplayH4">
                            <b>@(bookForSale.Book.BookTitle)</b>
                        </RadzenText>

                        <RadzenText TextStyle="TextStyle.Overline" class="rz-display-flex rz-mt-2 rz-mb-0">Isbn</RadzenText>
                        <RadzenText TextStyle="TextStyle.Body1">
                            <b>@(bookForSale.Book.Isbn)</b>
                        </RadzenText>

                        <RadzenText TextStyle="TextStyle.Overline" class="rz-display-flex rz-mt-2 rz-mb-0">Author</RadzenText>
                        <RadzenText TextStyle="TextStyle.Body1">
                            <b>@(bookForSale.Book.GetAuthorsAsString())</b>
                        </RadzenText>

                        <RadzenText TextStyle="TextStyle.Overline" class="rz-display-flex rz-mt-2 rz-mb-0">Edition</RadzenText>
                        <RadzenText TextStyle="TextStyle.Body1">
                            <b>@(bookForSale.Book.Edition)</b>
                        </RadzenText>

                        <RadzenText TextStyle="TextStyle.Overline" class="rz-display-flex rz-mt-2 rz-mb-0">Condition</RadzenText>
                        <RadzenText TextStyle="TextStyle.Body1">
                            <b>@(bookForSale.Condition.State)</b>
                        </RadzenText>

                        <RadzenText TextStyle="TextStyle.Overline" class="rz-display-flex rz-mt-2 rz-mb-0">Comment</RadzenText>
                        <RadzenText TextStyle="TextStyle.Body1">
                            <b>
                                @if (string.IsNullOrWhiteSpace(bookForSale.Comment))
                                {
                                    <RadzenText TextStyle="TextStyle.Body1"><b>No comment available</b></RadzenText>
                                }
                                else
                                {
                                    <RadzenText TextStyle="TextStyle.Body1"><b>@(bookForSale.Comment)</b></RadzenText>
                                }
                            </b>
                        </RadzenText>
                        
                        <RadzenText TextStyle="TextStyle.Overline" class="rz-display-flex rz-mt-2 rz-mb-0">Price</RadzenText>
                        <RadzenText TextStyle="TextStyle.Body1">
                            <b>@(bookForSale.Price + " Kr.")</b>
                            </RadzenText>

                        <RadzenRow Gap="1" Style="padding-top: 1em">
                            <RadzenButton Variant="Variant.Text" Text="Edit" Click="() => OpenEdit(bookForSale)" Style="background-color: #0c4128; color: white"></RadzenButton>
                            <RadzenButton Variant="Variant.Text" Text="Delete Book" Click="() => DeleteBookForSaleAsync(bookForSale.Id)" Style="background-color: #0c4128; color: white"></RadzenButton>
                        </RadzenRow>
                    </RadzenColumn>

                </RadzenRow>
            </RadzenStack>
        </RadzenCard>
    }
    
    @if (_isEditing)
    {
        <div class="overlay">
            <EditingCard OnClose="HandleClose"/>
        </div>
    }
</div>

@code {

    private BooksForSaleDto _booksForSaleDto;
    private string _owner = "Test"; //TODO implement with jwt or java login database
    public bool _isEditing = false;
    private BookForSale _currentlySelected;
    
    private void HandleClose()
    {
        _isEditing = false;
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            _booksForSaleDto = await bookService.GetBooksByOwnerAsync(_owner);
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
        }
    }

    private async Task DeleteBookForSaleAsync(int id)
    {
        await bookService.DeleteBookForSaleAsync(id);
        _booksForSaleDto = await bookService.GetBooksByOwnerAsync(_owner);
        StateHasChanged();
    }
    
    private async void OpenEdit(BookForSale bookForSale)
    {
        CurrentlySelectedBookForSale.CurrentlySelected = bookForSale;
        _isEditing = true;
        await DialogService.OpenAsync<EditingCard>("Edit Book", 
            new Dictionary<string, object>()
            {
                {"BookForSale", _currentlySelected}
            },
            new DialogOptions()
            {
                Width = "50%", Height = "50%"
            });
    }
}