@page "/BookCatalog"   
@using System.Collections
@using global::Shared.Domain
@using global::Shared.DTOs
@using HttpClients.ClientInterfaces
@inject IBookService bookService


<RadzenStack Orientation="Orientation.Vertical" JustifyContent="JustifyContent.Center" AlignItems="AlignItems.Center" Gap="0.25rem" Wrap="FlexWrap.Wrap">
    <h2 style="margin-top: 1rem"> BookCatalog</h2>


    <div class="rz-p-0 rz-p-md-3 rz-justify-content-center" style="padding: 0.5rem">
        <RadzenColumn class="rz-justify-content-center">
            <RadzenRow JustifyContent="JustifyContent.Center" class="rz-my-3 rz-mx-auto">
                <p>
                    Here you can see an overview of all the books there is currently for sale
                </p>
            </RadzenRow>
            <RadzenRow JustifyContent="JustifyContent.Center" class="rz-my-6 rz-mx-auto">
                <RadzenTextBox @bind-Value="@_searchInput" Change="@(args => FilterBooksByName(args))" Placeholder="Search by book name..." Style="width: 100%; max-width: 300px;"/>
            </RadzenRow>
            <RadzenRow JustifyContent="JustifyContent.Center" class="rz-my-6 rz-mx-auto">
                <RadzenDropDown @bind-Value=@_courseSelected Data=@_courses Style="width: 100%; max-width: 300px;" Change="@(args => FilterBooksByCourse(args))"/>
            </RadzenRow>
        </RadzenColumn>
        @foreach (BookForSale bookForSale in _filteredBooks.BooksForSale)
        {
            <RadzenCard Variant="@Variant.Filled" class="rz-my-12 rz-mx-auto">
                <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.Start" Gap="1rem" Class="rz-p-12">
                    <RadzenRow RowGap="1">
                        <!-- Left side columns -->
                        <RadzenColumn SizeSM="8">

                            <!-- Text in the card -->
                            <RadzenText TextStyle="TextStyle.H4" class="rz-display-flex rz-mt-2 rz-my-0">Book Title</RadzenText>
                            <RadzenText TextStyle="TextStyle.DisplayH4">
                                <b>@(bookForSale.Book.BookTitle)</b>
                            </RadzenText>

                            <RadzenText TextStyle="TextStyle.Overline" class="rz-display-flex rz-mt-2 rz-mb-0">Isbn</RadzenText>
                            <RadzenText TextStyle="TextStyle.Body1">
                                <b>@(bookForSale.Book.Isbn)</b>
                            </RadzenText>

                            <RadzenText TextStyle="TextStyle.Overline" class="rz-display-flex rz-mt-2 rz-mb-0">Author</RadzenText>
                            <RadzenText TextStyle="TextStyle.Body1">
                                <b>@(bookForSale.Book.GetAuthorsAsString())</b>
                            </RadzenText>

                            <RadzenText TextStyle="TextStyle.Overline" class="rz-display-flex rz-mt-2 rz-mb-0">Edition</RadzenText>
                            <RadzenText TextStyle="TextStyle.Body1">
                                <b>@(bookForSale.Book.Edition)</b>
                            </RadzenText>

                            <RadzenText TextStyle="TextStyle.Overline" class="rz-display-flex rz-mt-2 rz-mb-0">Condition</RadzenText>
                            <RadzenText TextStyle="TextStyle.Body1">
                                <b>@(bookForSale.Condition.State)</b>
                            </RadzenText>

                            <RadzenText TextStyle="TextStyle.Overline" class="rz-display-flex rz-mt-2 rz-mb-0">Comment</RadzenText>
                            <RadzenText TextStyle="TextStyle.Body1">
                                <b>@(bookForSale.Comment)</b>
                            </RadzenText>

                            <RadzenText TextStyle="TextStyle.Overline" class="rz-display-flex rz-mt-2 rz-mb-0">Price</RadzenText>
                            <RadzenText TextStyle="TextStyle.Body1">
                                <b>@(bookForSale.Price)</b>
                            </RadzenText>

                            <RadzenColumn SizeSM="8" Style="padding-top: 1em">
                                <RadzenButton Variant="Variant.Text" Text="Show Owner Info" Click="() => setInformationVisible()" Style="background-color: #0c4128; color: white"></RadzenButton>

                                <RadzenColumn Visible=informationVisible Style="padding-top: 1em">
                                    <RadzenText TextStyle="TextStyle.Overline" class="rz-display-flex rz-mt-2 rz-mb-0">Owner</RadzenText>
                                    <RadzenText TextStyle="TextStyle.Body1">
                                        <b>@(bookForSale.Owner)</b>
                                    </RadzenText>
                                </RadzenColumn>

                            </RadzenColumn>

                        </RadzenColumn>

                    </RadzenRow>
                </RadzenStack>
            </RadzenCard>
        }
    </div>
</RadzenStack>


@code {
    private List<string> _courses = new();

    private string _courseSelected;

    private string _selectedBook;

    private BooksForSaleDto _books;
    private BooksForSaleDto _filteredBooks;

    protected override async void OnInitialized()
    {
        _books = await bookService.GetAllBooksForSaleAsync();
        _filteredBooks = new(_books.BooksForSale);
        convertCoursesToString();
    }

    private void convertCoursesToString()
    {
        foreach (BookForSale bfs in _books.BooksForSale)
        {
            foreach (Course course in bfs.Book.courses)
            {
                if (_courses.Contains(course.Name) == false)
                    _courses.Add(course.Name);
            }
        }
    }

    private Boolean informationVisible = false;

    private string _category = "";
    private string? _searchInput;


    private void setInformationVisible()
    {
        if (informationVisible == false)
        {
            informationVisible = true;
        }
        else
        {
            informationVisible = false;
        }
    }

    private void FilterBooksByCourse(object args)
    {
        string selectedCourse = args as string;
        _filteredBooks.BooksForSale = _books.BooksForSale.Where(bfs => bfs.Book.courses.Any(c => c.Name == selectedCourse)).ToList();
    }

    private void FilterBooksByName(object args)
    {
        string searchInput = args as string;
        _filteredBooks.BooksForSale = _books.BooksForSale.Where(bfs => bfs.Book.BookTitle.Contains(searchInput, StringComparison.OrdinalIgnoreCase)).ToList();
    }

}