@page "/SellBook"
@using global::Shared.DTOs
@using HttpClients.ClientInterfaces
@using global::Shared.Domain
@using System.Collections
@inject IBookService bookService

<div Class="rz-p-0 rz-p-md-12">
    <RadzenRow class="rz-text-align-center" Gap="0.25rem">
        <RadzenColumn>
            <h3>Sell Book</h3>
            <RadzenStack Orientation="Orientation.Vertical" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center" Wrap="FlexWrap.Wrap" Gap="1rem" Class="rz-p-sm-6">
                <RadzenDataGrid FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" AllowPaging="true" PageSize="5"
                                class="rz-border-radius-3 rz-shadow-2"
                                Data="@_booksAvailable" TItem="BooksAvailableDto" ColumnWidth="200px"
                                SelectionMode="DataGridSelectionMode.Single" @bind-Value=@_selectedBook>
                    <Columns>
                        <RadzenDataGridColumn TItem="BooksAvailableDto" Property="Title" Title="Title" Sortable="false" Filterable="false"/>
                        <RadzenDataGridColumn TItem="BooksAvailableDto" Property="Edition" Title="Edition"/>
                    </Columns>
                </RadzenDataGrid>
                <div style="display: flex; align-items: center; margin-bottom: 16px">
                    <RadzenButton Click="@ClearSelection" Text="Clear Selected Book" Style="background-color: #0c4128"/>
                    @if (_selectedBook?.Any() == true)
                    {
                        <div style="margin-left: 16px">
                            Selected Book: @_selectedBook[0].Title @_selectedBook[0].Edition
                        </div>
                    }
                </div>
                <RadzenFormField Style="width: 60%" Text="Condition" Variant="@variant">
                    <ChildContent>
                        <RadzenDropDown @bind-Value=@_condition Data=@GetConditions(_conditions)></RadzenDropDown>
                    </ChildContent>
                </RadzenFormField>

                <RadzenFormField Style="width: 60%" Text="Price" Variant="@variant">
                    <ChildContent>
                        <RadzenTextBox @bind-Value="@_price"/>
                    </ChildContent>
                </RadzenFormField>
            </RadzenStack>
        </RadzenColumn>

        <RadzenColumn>
            <RadzenStack Orientation="Orientation.Vertical" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center" Wrap="FlexWrap.Wrap" Gap="1rem" Class="rz-p-sm-6">
                <RadzenFormField Style="width: 60%" Text="Comment" Variant="@variant">
                    <ChildContent>
                        <RadzenTextArea Style="resize: unset; min-height: 20em" @bind-Value="@_comment"/>
                    </ChildContent>
                </RadzenFormField>

                <RadzenButton Text="Save Changes" Click="SaveChanges" Icon="save" Style="background-color: #0c4128"></RadzenButton>
                <div>
                    @if (!string.IsNullOrEmpty(_resultMsg))
                    {
                        <label style="color: @_resultMsgColor">@_resultMsg</label>
                    }
                </div>
            </RadzenStack>
        </RadzenColumn>
    </RadzenRow>
</div>

<div class="rz-p-0 rz-p-md-6">

</div>

@code {
    private string? _price;
    private ICollection<Condition> _conditions;
    private string _username = "Test"; //TODO: Get username from auth
    private string? _comment = "";
    private string _condition;
    private ICollection<BooksAvailableDto> _booksAvailable;
    private IList<BooksAvailableDto>? _selectedBook = new List<BooksAvailableDto>();
    
    private string _resultMsg = "";
    private string _resultMsgColor = "";


    Variant variant = Variant.Outlined;

    public async Task SaveChanges()
    {
        try
        {
            _resultMsg = "";

            IsAllSelected();
            
            BookSaleDto bookSaleDto = new BookSaleDto()
            {
                Isbn = _selectedBook[0].Isbn,
                BookCondition = new Condition(_condition),
                Comment = _comment,
                Price = Convert.ToDecimal(_price),
                Owner = _username, //TODO get from jwt
                Edition = _selectedBook[0].Edition
            };
            
            String result = await bookService.SellBookAsync(bookSaleDto);
            _resultMsg = result;
            _resultMsgColor = "green";
            
            ClearSelection();
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            _resultMsg = e.Message;
            _resultMsgColor = "red";
        }
    }

    private void IsAllSelected()
    {
        if (_selectedBook == null || _selectedBook.Count == 0)
        {
            throw new Exception("Please select a book");
        }
        if (string.IsNullOrEmpty(_condition))
        {
            throw new Exception("Please select a condition");
        }
    }

    protected override void OnInitialized()
    {
        _booksAvailable = bookService.GetAvailableBooksAsync();
        _conditions = bookService.GetConditionsAsync();
    }


    private IEnumerable GetConditions(ICollection<Condition> conditions)
    {
        List<string> conditionNames = new List<string>();

        foreach (Condition condition in _conditions)
        {
            conditionNames.Add(condition.State);
        }

        return conditionNames;
    }

    private void ClearSelection()
    {
        _selectedBook = null;
        _condition = "";
    }

}